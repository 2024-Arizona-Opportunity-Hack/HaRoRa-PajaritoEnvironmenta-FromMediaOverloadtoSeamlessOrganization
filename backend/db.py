import os
import uuid
from typing import Optional, List

import psycopg2
from psycopg2 import pool
from psycopg2 import sql
import data_models

# Connect to the database
# PG_USER = os.environ["PG_USER"]
# PG_PASSWORD = os.environ["PG_PASSWORD"]
# PG_HOST = os.environ["PG_HOST"]
# PG_PORT = os.environ["PG_PORT"]
# PG_DB = os.environ["PG_DB"]

PG_USER = "postgres"
PG_PASSWORD = "postgres"
PG_HOST = "localhost"
PG_PORT = "5555"
PG_DB = "peec_db"


def with_connection(func):
    """
    Function decorator for passing connections
    """

    def connection(*args, **kwargs):
        # Here, you may even use a connection pool
        conn = psycopg2.connect(
            dbname=PG_DB, user=PG_USER, password=PG_PASSWORD, host=PG_HOST, port=PG_PORT
        )
        try:
            rv = func(conn, *args, **kwargs)
        except Exception as e:
            conn.rollback()
            raise e
        else:
            # Can decide to see if you need to commit the transaction or not
            conn.commit()
        finally:
            conn.close()
        return rv

    return connection


READ_ONLY_POOL = pool.ThreadedConnectionPool(
    minconn=1,
    maxconn=10,
    host=PG_HOST,
    port=PG_PORT,
    database=PG_DB,
    user=PG_USER,
    password=PG_PASSWORD,
)


def with_read_connection(func):
    def read_connection(*args, **kwargs):
        conn = READ_ONLY_POOL.getconn()
        try:
            cur = conn.cursor()
            cur.execute("SET TRANSACTION READ ONLY")
            rv = func(cur, *args, **kwargs)
        except Exception as e:
            READ_ONLY_POOL.putconn(conn)
            raise e
        else:
            READ_ONLY_POOL.putconn(conn)
            return rv

    return read_connection


@with_connection
def create_tables(conn):
    cur = conn.cursor()
    with open("./database/DDL.sql", "r") as f:
        cur.execute(f.read())
    cur.close()

@with_connection
def get_search_query_result(conn,
                            query_text: str,
                            query_embedding: list[float],
                            season: Optional[str] = None,
                            tags: Optional[list[str]] = None,
                            coordinates: Optional[list[float]] = None,
                            distance_radius: Optional[float] = None,
                            date_from: Optional[str] = None,
                            date_to: Optional[str] = None,
                            match_count: Optional[int] = 50,
                            full_text_weight: Optional[float] = 1,
                            semantic_weight: Optional[float] = 1,
                            rrf_k: Optional[int] = 50) -> Optional[
    List[data_models.ImageDetail]]:
    def get_where_clause_part(season: Optional[str],
                              tags: Optional[list[str]], coordinates: Optional[list[float]],
                              distance_radius: Optional[float], date_from: str,
                              date_to: str) -> str:
        where_clause_sql = " WHERE"
        if season is not None:
            where_clause_sql += " season ='{}'".format(season)
        if tags is not None:
            if where_clause_sql != " WHERE":
                where_clause_sql += " AND"
            where_clause_sql += " EXISTS (SELECT 1 FROM unnest(STRING_TO_ARRAY(tags, ',')) AS tag WHERE tag = ANY (STRING_TO_ARRAY('{}', ',')))".format(tags)
        if coordinates is not None:
            if where_clause_sql != " WHERE":
                where_clause_sql += " AND"
            where_clause_sql += " ST_DWithin(coordinates, ST_MakePoint({}, {})::geography, {})".format(coordinates[0],
                                                                                                       coordinates[1],
                                                                                                       distance_radius)
        if date_from is not None:
            if where_clause_sql != " WHERE":
                where_clause_sql += " AND"
            where_clause_sql += " capture_time >= '{}'".format(date_from)
        if date_to is not None:
            if where_clause_sql != " WHERE":
                where_clause_sql += " AND"
            where_clause_sql += " capture_time <= '{}'".format(date_to)

        return "" if where_clause_sql == " WHERE" else where_clause_sql

    search_query_with_part = f"""
    with fts_ranked_title_caption_tags as (
            select
            uuid,
            -- Note: ts_rank_cd is not indexable but will only rank matches of the where clause
            -- which shouldn't be too big
            row_number() over(order by ts_rank_cd(title_caption_tags_fts_vector, websearch_to_tsquery('{query_text}')) desc) as rank_ix
    from
        image_detail
    where
        title_caption_tags_fts_vector @@ websearch_to_tsquery('{query_text}')
    order by rank_ix
    limit least({match_count}, 30) * 2
    ),
    semantic as (
        select
            uuid,
            row_number() over(order by image_detail.embedding_vector <#> ARRAY{query_embedding}::vector) as rank_ix
    from
        image_detail
    order by rank_ix
    limit least({match_count}, 30) *2
    )"""

    search_query_select_part = f"""
    select
        image_detail. *
    from
        fts_ranked_title_caption_tags
            full outer join semantic
                            on fts_ranked_title_caption_tags.uuid = semantic.uuid
            join image_detail
                 on fts_ranked_title_caption_tags.uuid = image_detail.uuid"""

    search_query_where_part = get_where_clause_part(season, tags, coordinates, distance_radius, date_from, date_to)

    search_query_order_by_limit_part = """
    order by
        coalesce(1.0 / ({} + fts_ranked_title_caption_tags.rank_ix), 0.0) * {} +
        coalesce(1.0 / ({} + semantic.rank_ix), 0.0) * {}
            desc
    limit
        least({}, 30)""".format(rrf_k, full_text_weight, rrf_k, semantic_weight, match_count)
    search_query = (search_query_with_part + search_query_select_part + search_query_where_part +
                    search_query_order_by_limit_part)

    with conn.cursor() as cur:
        cur.execute(sql.SQL(search_query))
        result = cur.fetchone()
        print(result)
        # print(data_models.ImageDetail(*result))
    if result:
        return data_models.ImageDetail(*result)
    return None

@with_connection
def tmp(conn, vec):
    with conn.cursor() as cur:
        cur.execute(f"""
    SELECT * FROM image_detail
    ORDER BY image_detail.embedding_vector <#> ARRAY{vec}::vector
    LIMIT 5;
""")
        # cur.execute(sql.SQL("""select * from image_detail ORDER BY image_detail.embedding_vector <=> %s::vector
        # LIMIT 5;"""),(vec,))
        result = cur.fetchone()
        print(result)

@with_connection
def insert(conn,
           url: str,
           title: str,
           caption: str,
           tags: str,
           embedded_vector: list[float],
           coordinates: Optional[list[float]] = None,
           capture_time: Optional[str] = None,
           extended_meta: Optional[str] = None,
           season: Optional[str] = None):
    cursor = conn.cursor()
    entry = (
        str(uuid.uuid4()),
        url,
        title,
        caption,
        tags,
        embedded_vector,
        f"POINT({coordinates[0]} {coordinates[1]})" if coordinates is not None else None,
        capture_time if capture_time is not None else None,
        extended_meta if extended_meta is not None else ""
    )
    insert_query = """
               INSERT INTO image_detail (
                   uuid, url, title, caption, tags, embedding_vector, coordinates, capture_time, extended_meta
               ) VALUES (%s, %s, %s, %s, %s, %s::float8[], ST_GeomFromText(%s), %s, %s::json)
           """
    try:
        cursor.execute(insert_query, entry)
        conn.commit()

    except Exception as error:
        print(f"Error inserting data: {error}")
    finally:
        if conn:
            cursor.close()
        conn.close()

if __name__ == "__main__":
    # tmp([0.12293017,0.9215783,0.28978387,0.3561214,0.4487701,0.27880338,0.23042707,0.95338565,0.027509136,0.31966034,0.23226567,0.8707728,0.47775146,0.90691036,0.5546461,0.8968142,0.58353806,0.7112229,0.48728207,0.9587535,0.7722168,0.978071,0.56961864,0.7911983,0.84262717,0.8031785,0.15870662,0.6172843,0.94013774,0.16496506,0.007224018,0.5251862,0.2662491,0.26246914,0.32629168,0.57766455,0.919287,0.09705562,0.2312826,0.3938973,0.09235407,0.5893614,0.20744324,0.7466622,0.48638222,0.6443438,0.3169645,0.37011486,0.92420244,0.42274243,0.7156462,0.04001928,0.04725333,0.64322084,0.88929486,0.727423,0.17232364,0.683551,0.77149487,0.46928242,0.586009,0.67087257,0.44849527,0.009212262,0.6012537,0.20419258,0.9065362,0.54470664,0.412148,0.5421003,0.61313945,0.10529678,0.47853833,0.6877781,0.7260957,0.22591265,0.2766846,0.21089786,0.17828271,0.25544384,0.87196374,0.79589885,0.5012675,0.70467114,0.5658791,0.7628081,0.34976006,0.21953657,0.6191162,0.9518109,0.2844111,0.5466782,0.89493304,0.9648881,0.7037859,0.53658646,0.7354371,0.791233,0.4494933,0.77974343,0.8319368,0.115019955,0.32290015,0.62263554,0.2208057,0.89231,0.35335103,0.19892594,0.9997325,0.5468713,0.34842962,0.053364042,0.702985,0.61226565,0.9324554,0.38701427,0.28122258,0.16127983,0.35294744,0.46145627,0.2767149,0.7835263,0.15519823,0.60661393,0.24268486,0.007817734,0.9710598,0.9576481,0.8743171,0.19820707,0.37272605,0.282652,0.7812307,0.87374485,0.36291102,0.6773897,0.3448536,0.6632299,0.6537388,0.94925475,0.4601226,0.4737768,0.20768845,0.901377,0.682659,0.28659675,0.48439708,0.8629709,0.40464133,0.72159237,0.3139505,0.92227244,0.8614918,0.36724406,0.702011,0.06338734,0.119747,0.52906483,0.6722178,0.94476336,0.66154325,0.9367781,0.542917,0.23703985,0.13272199,0.87815195,0.06697378,0.6146474,0.5009945,0.38330445,0.72794634,0.7811215,0.1232593,0.065095104,0.7957153,0.8260969,0.49825507,0.6261613,0.73259425,0.8629689,0.93282807,0.32598642,0.056831438,0.40648842,0.46760896,0.59715337,0.019546917,0.46499103,0.29854345,0.3166323,0.7128406,0.064023,0.90868735,0.26056206,0.21647336,0.6974179,0.745204,0.5178827,0.21431096,0.7311729,0.44910944,0.77303797,0.42595047,0.92344034,0.38791746,0.51646686,0.83662283,0.08584806,0.6212565,0.20339243,0.5886683,0.44421053,0.24874596,0.6810766,0.9038702,0.8060191,0.744254,0.8201642,0.053005137,0.67012995,0.7871858,0.08757449,0.8862759,0.23334399,0.18729256,0.14975347,0.41409603,0.5349464,0.7545814,0.8879792,0.80468017,0.07230941,0.94051963,0.32928583,0.0074052466,0.47199216,0.088387504,0.18821804,0.19732682,0.7784766,0.86305904,0.18410847,0.27408987,0.5341461,0.6071605,0.7201325,0.37157404,0.6111672,0.8365688,0.12867488,0.22856236,0.99019086,0.7628831,0.26295957,0.19630545,0.18737492,0.6416722,0.7934493,0.5464465,0.5367189,0.3617418,0.13444874,0.016783709,0.009801708,0.81416875,0.22508506,0.93904454,0.7031511,0.5922119,0.58771986,0.8823559,0.33665022,0.055954926,0.21566166,0.9416404,0.3567167,0.75984406,0.7651808,0.4685839,0.4858682,0.108338766,0.9194171,0.50524515,0.4885342,0.76290476,0.81798923,0.3608992,0.517805,0.13672526,0.23046464,0.92973536,0.06110464,0.5326489,0.9455096,0.816957,0.02874476,0.22530086,0.5663472,0.7404656,0.08599614,0.8289386,0.11213987,0.15141661,0.6228591,0.9672097,0.90906626,0.42446133,0.26120153,0.4878344,0.4218114,0.2066402,0.8890639,0.10880199,0.4737618,0.38976544,0.28190848,0.6344781,0.38445836,0.411651,0.935895,0.29196012,0.35487834,0.82467884,0.012529122,0.86078614,0.79263157,0.21644618,0.51582026,0.83563906,0.69595605,0.07262821,0.26995555,0.48200464,0.67615694,0.5255597,0.41818464,0.8202688,0.45273566,0.83566004,0.43145654,0.76094455,0.572712,0.51594347,0.90219545,0.5459744,0.72459954,0.47261465,0.21441063,0.9957831,0.9317426,0.31974673,0.8199423,0.87228274,0.94703096,0.85378134,0.4801357,0.30659157,0.07584919,0.9168463,0.22920878,0.34394535,0.9702961,0.57586163,0.016087133,0.77508324,0.69286877,0.8134983,0.73133683,0.4827351,0.12972859,0.5546453,0.37575972,0.055966727,0.57253945,0.27992213,0.885442,0.25579387,0.73610747,0.2111635,0.6434686,0.52191544,0.62219375,0.2934853,0.94680595,0.08098342,0.20276435,0.41213864,0.5396514,0.6476375,0.5924407,0.9191642,0.94974023,0.66608614,0.7502459,0.46139914,0.30527717,0.4399896,0.17760023,0.91846377,0.9215569,0.40274727,0.35688522,0.34912395,0.7588691,0.7903367,0.9697068,0.1517598,0.89190453,0.31606278,0.98656356,0.020500796,0.26080373,0.13568132,0.53134346,0.39942122,0.12710647,0.3387292,0.2603737,0.9438344,0.358,0.32990634,0.60447174,0.25081396,0.82318604,0.51512784,0.17717987,0.25004762,0.8575036,0.8689858,0.052176416,0.5204767,0.8506357,0.17077026,0.4251471,0.20483047,0.6375013,0.97072697,0.76300675,0.5404285,0.55685705,0.4221033,0.17101008,0.8556402,0.6055293,0.06471495,0.79609627,0.25442526,0.23621961,0.28946897,0.5358087,0.86014485,0.09202231,0.5517822,0.68201774,0.07056276,0.4350947,0.77684426,0.50872105,0.30500022,0.39042792,0.03352666,0.72486305,0.79962873,0.5806294,0.7805646,0.786772,0.62213546,0.7902211,0.456305,0.19381034,0.82438403,0.7829718,0.25662518,0.9127301,0.06741434,0.39584184,0.45245156,0.28007618,0.18546738,0.9108305,0.16206996,0.11911998,0.37099865,0.5252638,0.25541505,0.6887469,0.6200439,0.4264218,0.88233256,0.07520435,0.087547496,0.67881095,0.6781139,0.9761686,0.7326662,0.88363373,0.3813948,0.7386795,0.5998613,0.13310184,0.28729904,0.9833871,0.9086971,0.17080456,0.10237368,0.90809137,0.49535963,0.71286666,0.096847005,0.2251702,0.4714831,0.6316912,0.6652336,0.60106426,0.6178892,0.7618839,0.1457087,0.9466447,0.28614628,0.4955868,0.79636496,0.92302275,0.31935948,0.54571456,0.7257386,0.48883352,0.38829315,0.198691,0.19126722,0.8061014,0.2315936,0.028185112,0.26587623,0.33576828,0.12156665,0.19810833,0.55550516,0.7871252,0.37635177,0.2082852,0.91808265,0.0912359,0.7852811,0.8241222,0.5488257,0.3462995,0.34535918,0.5879612,0.21052425,0.7916178,0.921602,0.47207412,0.8547955,0.5802437,0.28699014,0.4825123,0.3318966,0.5445268,0.32220444,0.45579165,0.80670977,0.52892756,0.49054235,0.84293616,0.4267653,0.5695611,0.5425713,0.18191977,0.588679,0.4070104,0.7491821,0.74998343,0.228483,0.1933652,0.50207675,0.67112345,0.84729624,0.1779693,0.2267653,0.95258176,0.5635949,0.43977106,0.15016355,0.8082051,0.20466065,0.19982138,0.34320864,0.673539,0.6786721,0.8312703,0.8974161,0.36620742,0.67024523,0.9421518,0.68954164,0.95492077,0.5840667,0.79745287,0.3179895,0.8422661,0.9992052,0.11053899,0.52248895,0.5799634,0.5411942,0.5459194,0.25609118,0.7334965,0.1967471,0.8660597,0.38173372,0.43002948,0.8939946,0.4903459,0.6594968,0.54245985,0.91220176,0.705849,0.48300627,0.04837474,0.62945026,0.2185185,0.80572546,0.9754274,0.9117339,0.04201195,0.010599578,0.034580663,0.67372704,0.8413975,0.40455726,0.45459837,0.07767631,0.9411116,0.31059656,0.90262926,0.33157805,0.7728369,0.21473946,0.57705355,0.96786356,0.70457006,0.73445535,0.12735742,0.43798327,0.09352401,0.31278333,0.0736424,0.24989007,0.8548104,0.9088913,0.8917163,0.2832661,0.6618758,0.22866584,0.06252299,0.5985341,0.5988289,0.19907112,0.74872464,0.41829392,0.83293056,0.71557385,0.9811842,0.6528265,0.9311955,0.8256984,0.8209328,0.2875812,0.39794385,0.25236887,0.025567513,0.9930618,0.7975671,0.6472041,0.9827993,0.31321147,0.93232834,0.0028705576,0.5133866,0.9366375,0.21131217,0.874279,0.54555815,0.9318857,0.91025484,0.8352522,0.53688014,0.056270625,0.003783872,0.32590765,0.3739448,0.781234,0.45848924,0.610901,0.26049352,0.49947143,0.4878644,0.45212457,0.77081585,0.984172,0.66377693,0.01945999,0.5223447,0.83297706,0.5675764,0.015339125,0.7830935,0.04474157,0.031596456,0.87479424,0.19103934,0.6699191,0.77406305,0.47030562,0.50873667,0.4002265,0.70702195,0.34441888,0.3503266,0.8732856,0.74090546,0.14938277,0.77843875,0.74008554,0.17131825,0.4892833,0.5497131,0.61133593,0.40032157,0.23359998,0.14783375,0.5505874,0.05770923,0.7954395,0.48852587,0.16959566,0.9123297,0.08407524,0.40621236,0.2078522,0.014063676,0.5828729,0.9488436,0.43232247,0.93149257,0.050175764,0.90686405,0.4055443,0.5096192,0.5622519,0.14743277,0.19930013,0.19636998,0.55978733,0.19026658,0.12139048,0.44170117,0.62095034,0.45874766,0.6899771,0.5357561,0.7507221,0.07799964,0.026571555,0.6037922,0.5762852,0.86712295])
    get_search_query_result('Sunset',
                            [0.12293017,0.9215783,0.28978387,0.3561214,0.4487701,0.27880338,0.23042707,0.95338565,0.027509136,0.31966034,0.23226567,0.8707728,0.47775146,0.90691036,0.5546461,0.8968142,0.58353806,0.7112229,0.48728207,0.9587535,0.7722168,0.978071,0.56961864,0.7911983,0.84262717,0.8031785,0.15870662,0.6172843,0.94013774,0.16496506,0.007224018,0.5251862,0.2662491,0.26246914,0.32629168,0.57766455,0.919287,0.09705562,0.2312826,0.3938973,0.09235407,0.5893614,0.20744324,0.7466622,0.48638222,0.6443438,0.3169645,0.37011486,0.92420244,0.42274243,0.7156462,0.04001928,0.04725333,0.64322084,0.88929486,0.727423,0.17232364,0.683551,0.77149487,0.46928242,0.586009,0.67087257,0.44849527,0.009212262,0.6012537,0.20419258,0.9065362,0.54470664,0.412148,0.5421003,0.61313945,0.10529678,0.47853833,0.6877781,0.7260957,0.22591265,0.2766846,0.21089786,0.17828271,0.25544384,0.87196374,0.79589885,0.5012675,0.70467114,0.5658791,0.7628081,0.34976006,0.21953657,0.6191162,0.9518109,0.2844111,0.5466782,0.89493304,0.9648881,0.7037859,0.53658646,0.7354371,0.791233,0.4494933,0.77974343,0.8319368,0.115019955,0.32290015,0.62263554,0.2208057,0.89231,0.35335103,0.19892594,0.9997325,0.5468713,0.34842962,0.053364042,0.702985,0.61226565,0.9324554,0.38701427,0.28122258,0.16127983,0.35294744,0.46145627,0.2767149,0.7835263,0.15519823,0.60661393,0.24268486,0.007817734,0.9710598,0.9576481,0.8743171,0.19820707,0.37272605,0.282652,0.7812307,0.87374485,0.36291102,0.6773897,0.3448536,0.6632299,0.6537388,0.94925475,0.4601226,0.4737768,0.20768845,0.901377,0.682659,0.28659675,0.48439708,0.8629709,0.40464133,0.72159237,0.3139505,0.92227244,0.8614918,0.36724406,0.702011,0.06338734,0.119747,0.52906483,0.6722178,0.94476336,0.66154325,0.9367781,0.542917,0.23703985,0.13272199,0.87815195,0.06697378,0.6146474,0.5009945,0.38330445,0.72794634,0.7811215,0.1232593,0.065095104,0.7957153,0.8260969,0.49825507,0.6261613,0.73259425,0.8629689,0.93282807,0.32598642,0.056831438,0.40648842,0.46760896,0.59715337,0.019546917,0.46499103,0.29854345,0.3166323,0.7128406,0.064023,0.90868735,0.26056206,0.21647336,0.6974179,0.745204,0.5178827,0.21431096,0.7311729,0.44910944,0.77303797,0.42595047,0.92344034,0.38791746,0.51646686,0.83662283,0.08584806,0.6212565,0.20339243,0.5886683,0.44421053,0.24874596,0.6810766,0.9038702,0.8060191,0.744254,0.8201642,0.053005137,0.67012995,0.7871858,0.08757449,0.8862759,0.23334399,0.18729256,0.14975347,0.41409603,0.5349464,0.7545814,0.8879792,0.80468017,0.07230941,0.94051963,0.32928583,0.0074052466,0.47199216,0.088387504,0.18821804,0.19732682,0.7784766,0.86305904,0.18410847,0.27408987,0.5341461,0.6071605,0.7201325,0.37157404,0.6111672,0.8365688,0.12867488,0.22856236,0.99019086,0.7628831,0.26295957,0.19630545,0.18737492,0.6416722,0.7934493,0.5464465,0.5367189,0.3617418,0.13444874,0.016783709,0.009801708,0.81416875,0.22508506,0.93904454,0.7031511,0.5922119,0.58771986,0.8823559,0.33665022,0.055954926,0.21566166,0.9416404,0.3567167,0.75984406,0.7651808,0.4685839,0.4858682,0.108338766,0.9194171,0.50524515,0.4885342,0.76290476,0.81798923,0.3608992,0.517805,0.13672526,0.23046464,0.92973536,0.06110464,0.5326489,0.9455096,0.816957,0.02874476,0.22530086,0.5663472,0.7404656,0.08599614,0.8289386,0.11213987,0.15141661,0.6228591,0.9672097,0.90906626,0.42446133,0.26120153,0.4878344,0.4218114,0.2066402,0.8890639,0.10880199,0.4737618,0.38976544,0.28190848,0.6344781,0.38445836,0.411651,0.935895,0.29196012,0.35487834,0.82467884,0.012529122,0.86078614,0.79263157,0.21644618,0.51582026,0.83563906,0.69595605,0.07262821,0.26995555,0.48200464,0.67615694,0.5255597,0.41818464,0.8202688,0.45273566,0.83566004,0.43145654,0.76094455,0.572712,0.51594347,0.90219545,0.5459744,0.72459954,0.47261465,0.21441063,0.9957831,0.9317426,0.31974673,0.8199423,0.87228274,0.94703096,0.85378134,0.4801357,0.30659157,0.07584919,0.9168463,0.22920878,0.34394535,0.9702961,0.57586163,0.016087133,0.77508324,0.69286877,0.8134983,0.73133683,0.4827351,0.12972859,0.5546453,0.37575972,0.055966727,0.57253945,0.27992213,0.885442,0.25579387,0.73610747,0.2111635,0.6434686,0.52191544,0.62219375,0.2934853,0.94680595,0.08098342,0.20276435,0.41213864,0.5396514,0.6476375,0.5924407,0.9191642,0.94974023,0.66608614,0.7502459,0.46139914,0.30527717,0.4399896,0.17760023,0.91846377,0.9215569,0.40274727,0.35688522,0.34912395,0.7588691,0.7903367,0.9697068,0.1517598,0.89190453,0.31606278,0.98656356,0.020500796,0.26080373,0.13568132,0.53134346,0.39942122,0.12710647,0.3387292,0.2603737,0.9438344,0.358,0.32990634,0.60447174,0.25081396,0.82318604,0.51512784,0.17717987,0.25004762,0.8575036,0.8689858,0.052176416,0.5204767,0.8506357,0.17077026,0.4251471,0.20483047,0.6375013,0.97072697,0.76300675,0.5404285,0.55685705,0.4221033,0.17101008,0.8556402,0.6055293,0.06471495,0.79609627,0.25442526,0.23621961,0.28946897,0.5358087,0.86014485,0.09202231,0.5517822,0.68201774,0.07056276,0.4350947,0.77684426,0.50872105,0.30500022,0.39042792,0.03352666,0.72486305,0.79962873,0.5806294,0.7805646,0.786772,0.62213546,0.7902211,0.456305,0.19381034,0.82438403,0.7829718,0.25662518,0.9127301,0.06741434,0.39584184,0.45245156,0.28007618,0.18546738,0.9108305,0.16206996,0.11911998,0.37099865,0.5252638,0.25541505,0.6887469,0.6200439,0.4264218,0.88233256,0.07520435,0.087547496,0.67881095,0.6781139,0.9761686,0.7326662,0.88363373,0.3813948,0.7386795,0.5998613,0.13310184,0.28729904,0.9833871,0.9086971,0.17080456,0.10237368,0.90809137,0.49535963,0.71286666,0.096847005,0.2251702,0.4714831,0.6316912,0.6652336,0.60106426,0.6178892,0.7618839,0.1457087,0.9466447,0.28614628,0.4955868,0.79636496,0.92302275,0.31935948,0.54571456,0.7257386,0.48883352,0.38829315,0.198691,0.19126722,0.8061014,0.2315936,0.028185112,0.26587623,0.33576828,0.12156665,0.19810833,0.55550516,0.7871252,0.37635177,0.2082852,0.91808265,0.0912359,0.7852811,0.8241222,0.5488257,0.3462995,0.34535918,0.5879612,0.21052425,0.7916178,0.921602,0.47207412,0.8547955,0.5802437,0.28699014,0.4825123,0.3318966,0.5445268,0.32220444,0.45579165,0.80670977,0.52892756,0.49054235,0.84293616,0.4267653,0.5695611,0.5425713,0.18191977,0.588679,0.4070104,0.7491821,0.74998343,0.228483,0.1933652,0.50207675,0.67112345,0.84729624,0.1779693,0.2267653,0.95258176,0.5635949,0.43977106,0.15016355,0.8082051,0.20466065,0.19982138,0.34320864,0.673539,0.6786721,0.8312703,0.8974161,0.36620742,0.67024523,0.9421518,0.68954164,0.95492077,0.5840667,0.79745287,0.3179895,0.8422661,0.9992052,0.11053899,0.52248895,0.5799634,0.5411942,0.5459194,0.25609118,0.7334965,0.1967471,0.8660597,0.38173372,0.43002948,0.8939946,0.4903459,0.6594968,0.54245985,0.91220176,0.705849,0.48300627,0.04837474,0.62945026,0.2185185,0.80572546,0.9754274,0.9117339,0.04201195,0.010599578,0.034580663,0.67372704,0.8413975,0.40455726,0.45459837,0.07767631,0.9411116,0.31059656,0.90262926,0.33157805,0.7728369,0.21473946,0.57705355,0.96786356,0.70457006,0.73445535,0.12735742,0.43798327,0.09352401,0.31278333,0.0736424,0.24989007,0.8548104,0.9088913,0.8917163,0.2832661,0.6618758,0.22866584,0.06252299,0.5985341,0.5988289,0.19907112,0.74872464,0.41829392,0.83293056,0.71557385,0.9811842,0.6528265,0.9311955,0.8256984,0.8209328,0.2875812,0.39794385,0.25236887,0.025567513,0.9930618,0.7975671,0.6472041,0.9827993,0.31321147,0.93232834,0.0028705576,0.5133866,0.9366375,0.21131217,0.874279,0.54555815,0.9318857,0.91025484,0.8352522,0.53688014,0.056270625,0.003783872,0.32590765,0.3739448,0.781234,0.45848924,0.610901,0.26049352,0.49947143,0.4878644,0.45212457,0.77081585,0.984172,0.66377693,0.01945999,0.5223447,0.83297706,0.5675764,0.015339125,0.7830935,0.04474157,0.031596456,0.87479424,0.19103934,0.6699191,0.77406305,0.47030562,0.50873667,0.4002265,0.70702195,0.34441888,0.3503266,0.8732856,0.74090546,0.14938277,0.77843875,0.74008554,0.17131825,0.4892833,0.5497131,0.61133593,0.40032157,0.23359998,0.14783375,0.5505874,0.05770923,0.7954395,0.48852587,0.16959566,0.9123297,0.08407524,0.40621236,0.2078522,0.014063676,0.5828729,0.9488436,0.43232247,0.93149257,0.050175764,0.90686405,0.4055443,0.5096192,0.5622519,0.14743277,0.19930013,0.19636998,0.55978733,0.19026658,0.12139048,0.44170117,0.62095034,0.45874766,0.6899771,0.5357561,0.7507221,0.07799964,0.026571555,0.6037922,0.5762852,0.86712295],
                    'spring', 'sunset', [-132.4194, 37.7749], 1000, '2024-10-12 18:30:00.000000', '2024-10-12 18:30:00.000000')
    # create_tables()
